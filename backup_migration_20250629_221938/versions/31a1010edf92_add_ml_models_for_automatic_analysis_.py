"""Add ML models for automatic analysis and labeling

Revision ID: 31a1010edf92
Revises: f78cf5b68592
Create Date: 2025-06-28 16:23:40.606645

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '31a1010edf92'
down_revision = 'f78cf5b68592'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ml_configurations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('ml_provider', sa.String(length=50), nullable=False),
    sa.Column('ml_model', sa.String(length=100), nullable=False),
    sa.Column('api_key_encrypted', sa.Text(), nullable=True),
    sa.Column('api_url', sa.String(length=500), nullable=True),
    sa.Column('auto_detect_columns', sa.Boolean(), nullable=True),
    sa.Column('min_unique_values', sa.Integer(), nullable=True),
    sa.Column('max_text_length', sa.Integer(), nullable=True),
    sa.Column('clustering_min_samples', sa.Integer(), nullable=True),
    sa.Column('sentiment_analysis_enabled', sa.Boolean(), nullable=True),
    sa.Column('preferred_open_question_threshold', sa.Float(), nullable=True),
    sa.Column('text_variability_threshold', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ml_configurations', schema=None) as batch_op:
        batch_op.create_index('idx_ml_configurations_project', ['project_id'], unique=False)

    op.create_table('ml_analyses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('file_id', sa.UUID(), nullable=False),
    sa.Column('sheet_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('ml_provider', sa.String(length=50), nullable=False),
    sa.Column('ml_model', sa.String(length=100), nullable=False),
    sa.Column('analysis_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('results', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['file_id'], ['files.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['sheet_id'], ['excel_sheets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ml_analyses', schema=None) as batch_op:
        batch_op.create_index('idx_ml_analyses_file', ['file_id'], unique=False)
        batch_op.create_index('idx_ml_analyses_project', ['project_id'], unique=False)
        batch_op.create_index('idx_ml_analyses_sheet', ['sheet_id'], unique=False)

    op.create_table('column_analyses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ml_analysis_id', sa.UUID(), nullable=False),
    sa.Column('column_id', sa.UUID(), nullable=False),
    sa.Column('detected_type', sa.String(length=50), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('unique_values_count', sa.Integer(), nullable=True),
    sa.Column('null_values_count', sa.Integer(), nullable=True),
    sa.Column('avg_text_length', sa.Float(), nullable=True),
    sa.Column('text_variability', sa.Float(), nullable=True),
    sa.Column('is_open_question', sa.Boolean(), nullable=True),
    sa.Column('question_complexity', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['column_id'], ['excel_columns.id'], ),
    sa.ForeignKeyConstraint(['ml_analysis_id'], ['ml_analyses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('column_analyses', schema=None) as batch_op:
        batch_op.create_index('idx_column_analyses_column', ['column_id'], unique=False)
        batch_op.create_index('idx_column_analyses_ml_analysis', ['ml_analysis_id'], unique=False)

    op.create_table('auto_labels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ml_analysis_id', sa.UUID(), nullable=False),
    sa.Column('column_analysis_id', sa.UUID(), nullable=False),
    sa.Column('label_name', sa.String(length=200), nullable=False),
    sa.Column('label_description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('theme', sa.String(length=100), nullable=True),
    sa.Column('cluster_id', sa.Integer(), nullable=True),
    sa.Column('cluster_size', sa.Integer(), nullable=True),
    sa.Column('representative_texts', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('sentiment_label', sa.String(length=20), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('emotion_tags', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('manual_validation', sa.String(length=20), nullable=True),
    sa.Column('validated_by', sa.UUID(), nullable=True),
    sa.Column('validated_at', sa.DateTime(), nullable=True),
    sa.Column('applied_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['column_analysis_id'], ['column_analyses.id'], ),
    sa.ForeignKeyConstraint(['ml_analysis_id'], ['ml_analyses.id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('auto_labels', schema=None) as batch_op:
        batch_op.create_index('idx_auto_labels_column_analysis', ['column_analysis_id'], unique=False)
        batch_op.create_index('idx_auto_labels_ml_analysis', ['ml_analysis_id'], unique=False)

    op.create_table('auto_label_applications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('auto_label_id', sa.UUID(), nullable=False),
    sa.Column('row_id', sa.UUID(), nullable=False),
    sa.Column('column_index', sa.Integer(), nullable=False),
    sa.Column('cell_value', sa.Text(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('applied_at', sa.DateTime(), nullable=True),
    sa.Column('applied_by', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['applied_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['auto_label_id'], ['auto_labels.id'], ),
    sa.ForeignKeyConstraint(['row_id'], ['excel_rows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('auto_label_applications', schema=None) as batch_op:
        batch_op.create_index('idx_auto_label_applications_auto_label', ['auto_label_id'], unique=False)
        batch_op.create_index('idx_auto_label_applications_row', ['row_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('auto_label_applications', schema=None) as batch_op:
        batch_op.drop_index('idx_auto_label_applications_row')
        batch_op.drop_index('idx_auto_label_applications_auto_label')

    op.drop_table('auto_label_applications')
    with op.batch_alter_table('auto_labels', schema=None) as batch_op:
        batch_op.drop_index('idx_auto_labels_ml_analysis')
        batch_op.drop_index('idx_auto_labels_column_analysis')

    op.drop_table('auto_labels')
    with op.batch_alter_table('column_analyses', schema=None) as batch_op:
        batch_op.drop_index('idx_column_analyses_ml_analysis')
        batch_op.drop_index('idx_column_analyses_column')

    op.drop_table('column_analyses')
    with op.batch_alter_table('ml_analyses', schema=None) as batch_op:
        batch_op.drop_index('idx_ml_analyses_sheet')
        batch_op.drop_index('idx_ml_analyses_project')
        batch_op.drop_index('idx_ml_analyses_file')

    op.drop_table('ml_analyses')
    with op.batch_alter_table('ml_configurations', schema=None) as batch_op:
        batch_op.drop_index('idx_ml_configurations_project')

    op.drop_table('ml_configurations')
    # ### end Alembic commands ###
