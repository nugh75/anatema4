"""add_advanced_labeling_system

Revision ID: 55b5e6ecb2a3
Revises: d9a7149d6ee7
Create Date: 2025-06-28 21:31:16.180450

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '55b5e6ecb2a3'
down_revision = 'd9a7149d6ee7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('label_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('system_prompt', sa.Text(), nullable=False),
    sa.Column('user_prompt_template', sa.Text(), nullable=False),
    sa.Column('preferred_model', sa.String(length=100), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('expected_labels_count', sa.Integer(), nullable=True),
    sa.Column('output_format', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('label_templates', schema=None) as batch_op:
        batch_op.create_index('idx_label_templates_project', ['project_id'], unique=False)

    op.create_table('label_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('label_id', sa.Integer(), nullable=False),
    sa.Column('calculated_at', sa.DateTime(), nullable=True),
    sa.Column('total_applications', sa.Integer(), nullable=True),
    sa.Column('manual_applications', sa.Integer(), nullable=True),
    sa.Column('ai_applications', sa.Integer(), nullable=True),
    sa.Column('sheet_distribution', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('column_distribution', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('first_used', sa.DateTime(), nullable=True),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('usage_frequency', sa.Float(), nullable=True),
    sa.Column('avg_ai_confidence', sa.Float(), nullable=True),
    sa.Column('human_override_rate', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('label_analytics', schema=None) as batch_op:
        batch_op.create_index('idx_label_analytics_label', ['label_id'], unique=False)
        batch_op.create_index('idx_label_analytics_project', ['project_id'], unique=False)

    op.create_table('ai_labeling_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('sheet_id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('target_type', sa.String(length=20), nullable=False),
    sa.Column('target_name', sa.String(length=255), nullable=True),
    sa.Column('available_labels', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('ai_provider', sa.String(length=50), nullable=True),
    sa.Column('ai_model', sa.String(length=100), nullable=True),
    sa.Column('custom_prompt', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('total_cells_processed', sa.Integer(), nullable=True),
    sa.Column('successful_applications', sa.Integer(), nullable=True),
    sa.Column('failed_applications', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['sheet_id'], ['excel_sheets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_labeling_sessions', schema=None) as batch_op:
        batch_op.create_index('idx_ai_labeling_sessions_project', ['project_id'], unique=False)

    op.create_table('label_applications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('sheet_id', sa.UUID(), nullable=False),
    sa.Column('label_id', sa.Integer(), nullable=False),
    sa.Column('applied_by', sa.UUID(), nullable=False),
    sa.Column('applied_at', sa.DateTime(), nullable=True),
    sa.Column('row_index', sa.Integer(), nullable=False),
    sa.Column('column_name', sa.String(length=255), nullable=False),
    sa.Column('cell_value', sa.Text(), nullable=True),
    sa.Column('application_type', sa.String(length=20), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('ai_session_id', sa.UUID(), nullable=True),
    sa.Column('ai_reasoning', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['applied_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['sheet_id'], ['excel_sheets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('label_applications', schema=None) as batch_op:
        batch_op.create_index('idx_label_applications_label', ['label_id'], unique=False)
        batch_op.create_index('idx_label_applications_project', ['project_id'], unique=False)
        batch_op.create_index('idx_label_applications_sheet', ['sheet_id'], unique=False)

    op.create_table('label_generations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('sheet_id', sa.UUID(), nullable=False),
    sa.Column('template_id', sa.UUID(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('column_name', sa.String(length=255), nullable=False),
    sa.Column('sample_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('ai_provider', sa.String(length=50), nullable=True),
    sa.Column('ai_model', sa.String(length=100), nullable=True),
    sa.Column('raw_ai_response', sa.Text(), nullable=True),
    sa.Column('processing_time', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('total_suggestions', sa.Integer(), nullable=True),
    sa.Column('approved_suggestions', sa.Integer(), nullable=True),
    sa.Column('rejected_suggestions', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.ForeignKeyConstraint(['sheet_id'], ['excel_sheets.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['label_templates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('label_generations', schema=None) as batch_op:
        batch_op.create_index('idx_label_generations_project', ['project_id'], unique=False)
        batch_op.create_index('idx_label_generations_sheet', ['sheet_id'], unique=False)

    op.create_table('label_suggestions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('generation_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('suggested_name', sa.String(length=200), nullable=False),
    sa.Column('suggested_description', sa.Text(), nullable=True),
    sa.Column('suggested_category', sa.String(length=100), nullable=True),
    sa.Column('suggested_color', sa.String(length=7), nullable=True),
    sa.Column('ai_confidence', sa.Float(), nullable=True),
    sa.Column('ai_reasoning', sa.Text(), nullable=True),
    sa.Column('sample_values', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.Column('final_name', sa.String(length=200), nullable=True),
    sa.Column('final_description', sa.Text(), nullable=True),
    sa.Column('final_category', sa.String(length=100), nullable=True),
    sa.Column('final_color', sa.String(length=7), nullable=True),
    sa.Column('created_label_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_label_id'], ['labels.id'], ),
    sa.ForeignKeyConstraint(['generation_id'], ['label_generations.id'], ),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('label_suggestions', schema=None) as batch_op:
        batch_op.create_index('idx_label_suggestions_generation', ['generation_id'], unique=False)

    with op.batch_alter_table('auto_label_applications', schema=None) as batch_op:
        batch_op.drop_column('column_index')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('auto_label_applications', schema=None) as batch_op:
        batch_op.add_column(sa.Column('column_index', sa.INTEGER(), autoincrement=False, nullable=False))

    with op.batch_alter_table('label_suggestions', schema=None) as batch_op:
        batch_op.drop_index('idx_label_suggestions_generation')

    op.drop_table('label_suggestions')
    with op.batch_alter_table('label_generations', schema=None) as batch_op:
        batch_op.drop_index('idx_label_generations_sheet')
        batch_op.drop_index('idx_label_generations_project')

    op.drop_table('label_generations')
    with op.batch_alter_table('label_applications', schema=None) as batch_op:
        batch_op.drop_index('idx_label_applications_sheet')
        batch_op.drop_index('idx_label_applications_project')
        batch_op.drop_index('idx_label_applications_label')

    op.drop_table('label_applications')
    with op.batch_alter_table('ai_labeling_sessions', schema=None) as batch_op:
        batch_op.drop_index('idx_ai_labeling_sessions_project')

    op.drop_table('ai_labeling_sessions')
    with op.batch_alter_table('label_analytics', schema=None) as batch_op:
        batch_op.drop_index('idx_label_analytics_project')
        batch_op.drop_index('idx_label_analytics_label')

    op.drop_table('label_analytics')
    with op.batch_alter_table('label_templates', schema=None) as batch_op:
        batch_op.drop_index('idx_label_templates_project')

    op.drop_table('label_templates')
    # ### end Alembic commands ###
