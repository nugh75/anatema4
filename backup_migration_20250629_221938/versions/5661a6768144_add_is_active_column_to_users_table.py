"""Add is_active column to users table

Revision ID: 5661a6768144
Revises: 
Create Date: 2025-06-28 15:19:20.090629

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5661a6768144'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cell_labels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('row_id', sa.UUID(), nullable=False),
    sa.Column('label_id', sa.Integer(), nullable=False),
    sa.Column('column_index', sa.Integer(), nullable=True),
    sa.Column('cell_value', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], ),
    sa.ForeignKeyConstraint(['row_id'], ['excel_rows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('cell_labels', schema=None) as batch_op:
        batch_op.create_index('idx_cell_labels_label', ['label_id'], unique=False)
        batch_op.create_index('idx_cell_labels_row', ['row_id'], unique=False)

    with op.batch_alter_table('excel_columns', schema=None) as batch_op:
        batch_op.add_column(sa.Column('data_type', sa.String(length=50), nullable=True))
        batch_op.alter_column('sheet_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('column_index',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_index('idx_excel_columns_sheet', ['sheet_id'], unique=False)

    with op.batch_alter_table('excel_rows', schema=None) as batch_op:
        batch_op.add_column(sa.Column('data', sa.JSON(), nullable=True))
        batch_op.alter_column('sheet_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('row_index',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_index('idx_excel_rows_sheet', ['sheet_id'], unique=False)

    with op.batch_alter_table('excel_sheets', schema=None) as batch_op:
        batch_op.add_column(sa.Column('row_count', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('column_count', sa.Integer(), nullable=True))
        batch_op.alter_column('file_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('sheet_index',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.create_index('idx_excel_sheets_file', ['file_id'], unique=False)

    with op.batch_alter_table('files', schema=None) as batch_op:
        batch_op.add_column(sa.Column('file_path', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('processing_status', sa.String(length=20), nullable=True))
        batch_op.alter_column('project_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('uploader_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('original_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('file_type',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=50),
               existing_nullable=True)
        batch_op.create_index('idx_files_project', ['project_id'], unique=False)

    with op.batch_alter_table('labels', schema=None) as batch_op:
        batch_op.alter_column('project_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('color',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=7),
               existing_nullable=True)
        batch_op.alter_column('categories',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=postgresql.ARRAY(sa.String()),
               existing_nullable=True)
        batch_op.create_index('idx_labels_project', ['project_id'], unique=False)
        batch_op.drop_constraint(batch_op.f('labels_project_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'projects', ['project_id'], ['id'])

    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('is_public', sa.Boolean(), nullable=True))
        batch_op.alter_column('owner_id',
               existing_type=sa.UUID(),
               nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=200),
               existing_nullable=False)
        batch_op.create_index('idx_projects_owner', ['owner_id'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('last_login', sa.DateTime(), nullable=True))
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=80),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=120),
               existing_nullable=False)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
        batch_op.drop_constraint(batch_op.f('users_email_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('users_username_key'), type_='unique')
        batch_op.create_index('idx_users_email', ['email'], unique=False)
        batch_op.create_index('idx_users_username', ['username'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index('idx_users_username')
        batch_op.drop_index('idx_users_email')
        batch_op.create_unique_constraint(batch_op.f('users_username_key'), ['username'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('users_email_key'), ['email'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('role',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=32),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
        batch_op.alter_column('email',
               existing_type=sa.String(length=120),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.String(length=80),
               type_=sa.VARCHAR(length=64),
               existing_nullable=False)
        batch_op.drop_column('last_login')
        batch_op.drop_column('is_active')

    with op.batch_alter_table('projects', schema=None) as batch_op:
        batch_op.drop_index('idx_projects_owner')
        batch_op.alter_column('name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
        batch_op.alter_column('owner_id',
               existing_type=sa.UUID(),
               nullable=True)
        batch_op.drop_column('is_public')
        batch_op.drop_column('description')

    with op.batch_alter_table('labels', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('labels_project_id_fkey'), 'projects', ['project_id'], ['id'], ondelete='CASCADE')
        batch_op.drop_index('idx_labels_project')
        batch_op.alter_column('categories',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
        batch_op.alter_column('color',
               existing_type=sa.String(length=7),
               type_=sa.VARCHAR(length=32),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
        batch_op.alter_column('project_id',
               existing_type=sa.UUID(),
               nullable=True)

    with op.batch_alter_table('files', schema=None) as batch_op:
        batch_op.drop_index('idx_files_project')
        batch_op.alter_column('file_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=64),
               existing_nullable=True)
        batch_op.alter_column('original_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.alter_column('uploader_id',
               existing_type=sa.UUID(),
               nullable=True)
        batch_op.alter_column('project_id',
               existing_type=sa.UUID(),
               nullable=True)
        batch_op.drop_column('processing_status')
        batch_op.drop_column('file_path')

    with op.batch_alter_table('excel_sheets', schema=None) as batch_op:
        batch_op.drop_index('idx_excel_sheets_file')
        batch_op.alter_column('sheet_index',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('file_id',
               existing_type=sa.UUID(),
               nullable=True)
        batch_op.drop_column('column_count')
        batch_op.drop_column('row_count')

    with op.batch_alter_table('excel_rows', schema=None) as batch_op:
        batch_op.drop_index('idx_excel_rows_sheet')
        batch_op.alter_column('row_index',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('sheet_id',
               existing_type=sa.UUID(),
               nullable=True)
        batch_op.drop_column('data')

    with op.batch_alter_table('excel_columns', schema=None) as batch_op:
        batch_op.drop_index('idx_excel_columns_sheet')
        batch_op.alter_column('column_index',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('sheet_id',
               existing_type=sa.UUID(),
               nullable=True)
        batch_op.drop_column('data_type')

    with op.batch_alter_table('cell_labels', schema=None) as batch_op:
        batch_op.drop_index('idx_cell_labels_row')
        batch_op.drop_index('idx_cell_labels_label')

    op.drop_table('cell_labels')
    # ### end Alembic commands ###
